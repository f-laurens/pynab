#!/bin/bash
set -uo pipefail
shopt -s extglob
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR
IFS=$'\n\t'

# Original source for this script:
# https://github.com/kr15h/travis-raspbian-image
# https://disconnected.systems/blog/custom-rpi-image-with-github-travis/

pynab_repository=${GITHUB_REPOSITORY:-f-laurens/pynab}
pynab_branch=${GITHUB_BRANCH:-release}
case ${pynab_branch} in
    v+([0-9]).+([0-9]).+([0-9])*)
        # vX.Y.Z tag-driven build: assume release branch
        pynab_tag=" (tag ${pynab_branch})"
        pynab_branch=release
        driver_branch=release
        ;;
    fl+([0-9]).+([0-9]).+([0-9])*)
        # flX.Y.Z tag-driven build: assume fl branch
        pynab_tag=" (tag ${pynab_branch})"
        pynab_branch=fl
        driver_branch=release
        ;;
    fx+([0-9]).+([0-9]).+([0-9])*)
        # fxX.Y.Z tag-driven build: assume fl-exp branch
        pynab_tag=" (tag ${pynab_branch})"
        pynab_branch=fl-exp
        driver_branch=release
        ;;
    *)
        # assume branch-driven build on given branch
        pynab_tag=""
        driver_branch=master
        ;;
esac

LC_ALL=C

if [ -d "/boot/dietpi" ]
then
    # DietPi distro
    distro="dietpi"
elif [ -f "/etc/rpi-issue" ]
then
    # Raspberry Pi OS distro
    distro="raspios"
else
    echo "$(basename ${0}): unsupported Linux distribution!"
    exit 3
fi

owner=$(getent passwd 1000 | cut -d: -f1)
group=$(getent passwd 1000 | cut -d: -f4)
home_dir=$(getent passwd 1000 | cut -d: -f6)
inst_dir="/opt"

if [ "${1:-}" == "ci-chroot" ]
then
     # CI chroot setup: building image in chroot environment.
    install_env="ci-chroot"
elif [ "${1:-}" == "pi-zero" ]
then
    # Local setup: allows doing initial or replacing existing setup on Pi Zero.
    install_env=""
    if [ "$(id -u)" != "0" ]
    then
        echo "$(basename ${0}) ${1} must be run as root."
        echo "WARNING: Removes any existing Pynab setup."
        exit 1
    fi
    rm -rf ${home_dir}/pynab ${home_dir}/wm8960 ${home_dir}/tagtagtag-ears ${home_dir}/cr14
    rm -rf ${inst_dir}/pynab ${inst_dir}/wm8960 ${inst_dir}/tagtagtag-ears ${inst_dir}/cr14
else
    echo "Usage: $(basename ${0}) pi-zero|ci-chroot"
    exit 2
fi
echo "Doing setup for ${pynab_repository} ${pynab_branch} branch${pynab_tag}."

# Edit /boot/cmdline.txt since it contains root device mapping to a PARTUUID that
# changed during parted resize when image was built.
echo "Editing /boot/cmdline.txt."
sed -i "s|root=PARTUUID=........-02|root=/dev/mmcblk0p2|" /boot/cmdline.txt
cat "/boot/cmdline.txt"

# Replace /etc/fstab since the non existing PARTUUID has to be changed here as well.
echo "Editing /etc/fstab."
sed -i -e "s|PARTUUID=........-01|/dev/mmcblk0p1|" -e "s|PARTUUID=........-02|/dev/mmcblk0p2|" /etc/fstab
cat "/etc/fstab" | grep "^/dev/"

echo "Setting gpu_mem."
GPU_MEM=16
if grep -q "^gpu_mem.*=" /boot/config.txt
then
    sed -i "s/\(gpu_mem.*\)=.*/\1=${GPU_MEM}/" /boot/config.txt
else
    echo "gpu_mem=${GPU_MEM}" >> /boot/config.txt
fi
cat /boot/config.txt | grep "gpu_mem.*="

echo "Disabling onboard sound."
if grep -q "^dtparam=audio" /boot/config.txt
then
    sed -i "s/dtparam=audio.*/dtparam=audio=off/" /boot/config.txt
else
    echo "dtparam=audio=off" >> /boot/config.txt
fi
cat /boot/config.txt | grep "dtparam=audio"

echo "Enabling DAC for Maker Faire 2018 cards."
if ! grep -q "^dtoverlay=hifiberry-dac" /boot/config.txt
then
    echo "dtoverlay=hifiberry-dac" >> /boot/config.txt
fi
cat /boot/config.txt | grep "dtoverlay=hifiberry-dac"

if [ "${install_env}" == "ci-chroot" ]
then
    # Install comitup package for headless WiFi setup
    wget https://davesteele.github.io/comitup/deb/davesteele-comitup-apt-source_1.1_all.deb
    dpkg -i --force-all davesteele-comitup-apt-source_1.1_all.deb
    rm davesteele-comitup-apt-source_1.1_all.deb
    apt-get update -y
    apt-get install --no-install-recommends -y comitup comitup-watch
    rm /etc/network/interfaces
    systemctl mask dnsmasq.service
    systemctl mask systemd-resolved.service
    systemctl mask dhcpd.service
    systemctl mask dhcpcd.service
    systemctl mask wpa-supplicant.service
    echo "web_service: nginx.service" >> /etc/comitup.conf
    echo "ap_name: Nabaztag-<nnn>" >> /etc/comitup.conf
    echo "service_name: Nabaztag" >> /etc/comitup.conf

    if [ "${distro}" == "raspios"  ]
    then
        if [ ! -f "/boot/userconf.txt" ]
        then
            # make sure 'pi' user has default 'raspberry' password
            echo 'pi:$y$j9T$9ZU7FXeU7PVHm49rB5Hbe.$MHZMLJfNfXBFbYgGwg/TNjADIRbna.Epxzd/MrqPJM9' > /boot/userconf.txt
        fi
        if [ ! -f "/boot/ssh" ]
        then
            # enable SSH
            touch /boot/ssh
        fi
    elif [ "${distro}" == "dietpi" ]
    then
        echo "Setting DietPi 'first boot' parameters."
        sed -i "s/\(AUTO_SETUP_KEYBOARD_LAYOUT\)=.*/\1=fr/" /boot/dietpi.txt
        sed -i "s/\(AUTO_SETUP_TIMEZONE\)=.*/\1=Europe\/Paris/" /boot/dietpi.txt
        sed -i "s/\(AUTO_SETUP_NET_WIFI_ENABLED\)=.*/\1=1/" /boot/dietpi.txt
        sed -i "s/\(AUTO_SETUP_NET_WIFI_COUNTRY_CODE\)=.*/\1=FR/" /boot/dietpi.txt
        sed -i "s/\(AUTO_SETUP_NET_HOSTNAME\)=.*/\1=Nabaztag/" /boot/dietpi.txt
        sed -i "s/\(AUTO_SETUP_HEADLESS\)=.*/\1=1/" /boot/dietpi.txt
        # -1=Nginx rather than -2=Lighttpd (DietPi default):
        sed -i "s/\(AUTO_SETUP_WEB_SERVER_INDEX\)=.*/\1=-1/" /boot/dietpi.txt
        # -4=Daemon + Drift rather than 2=boot + daily (DietPi default):
        sed -i "s/\(CONFIG_NTP_MODE\)=.*/\1=4/" /boot/dietpi.txt
        sed -i "s/\(CONFIG_SERIAL_CONSOLE_ENABLE\)=.*/\1=0/" /boot/dietpi.txt
        rm /boot/dietpi-wifi.txt
    fi

    echo "Setting hostname."
    hostname=$(cat /etc/hostname | tr -d " \t\n\r")
    sed -i "s/${hostname}/Nabaztag/" /etc/hostname
    sed -i "s/${hostname}/Nabaztag/" /etc/hosts

    echo "Setting timezone."
    echo "Europe/Paris" > /etc/timezone
    ln -fs /usr/share/zoneinfo/Europe/Paris /etc/localtime
fi

echo "Ensuring user ${owner} has appropriate sudo privileges."
usermod -aG sudo ${owner}
if [ "${distro}" == "raspios"  ]
then
    echo "${owner} ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/010_${owner}-nopasswd
elif [ "${distro}" == "dietpi" ]
then
    echo "${owner} ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/${owner}
fi

echo "Installing required packages."
sudo apt-get update -y
sudo apt-get dist-upgrade -y
sudo apt-get install --no-install-recommends -y postgresql libpq-dev git python3 python3-venv python3-dev gettext nginx openssl libssl-dev libffi-dev libmpg123-dev libasound2-dev libatlas-base-dev libgfortran5 libopenblas-dev liblapack-dev zram-tools
sudo apt-get install --no-install-recommends -y gcc make raspberrypi-kernel-headers

build_and_install_driver() {
    for dir in /lib/modules/*/build
    do
        kernel=$(basename $(dirname ${dir}))
        make KERNELRELEASE=${kernel}
        sudo make install KERNELRELEASE=${kernel}
        make clean KERNELRELEASE=${kernel}
    done
}

echo "Installing sound driver for Ulule 2019 cards."
sudo mkdir -p ${inst_dir}/wm8960
sudo chown ${owner}:${group} ${inst_dir}/wm8960
sudo -u ${owner} git clone --depth 1 -b tagtagtag-sound https://github.com/pguyot/wm8960 ${inst_dir}/wm8960
cd ${inst_dir}/wm8960
build_and_install_driver

echo "Installing ears driver."
sudo mkdir -p ${inst_dir}/tagtagtag-ears
sudo chown ${owner}:${group} ${inst_dir}/tagtagtag-ears
sudo -u ${owner} git clone --depth 1 -b ${driver_branch} https://github.com/pguyot/tagtagtag-ears ${inst_dir}/tagtagtag-ears
cd ${inst_dir}/tagtagtag-ears
build_and_install_driver

echo "Installing RFID reader driver."
sudo mkdir -p ${inst_dir}/cr14
sudo chown ${owner}:${group} ${inst_dir}/cr14
sudo -u ${owner} git clone --depth 1 -b ${driver_branch} https://github.com/pguyot/cr14 ${inst_dir}/cr14
cd ${inst_dir}/cr14
build_and_install_driver

if [ -d "${inst_dir}/pynab" ]
then
    echo "Using existing local Pynab repository."
else
    echo "Cloning Pynab ${pynab_branch} branch from ${pynab_repository}."
    sudo mkdir -p ${inst_dir}/pynab
    sudo chown ${owner}:${group} ${inst_dir}/pynab
    sudo -u ${owner} git clone --depth 1 -b ${pynab_branch} https://github.com/${pynab_repository}.git ${inst_dir}/pynab
fi

echo "Installing NabBlockly."
sudo apt-get install --no-install-recommends -y erlang-base erlang-dev erlang-inets erlang-tools erlang-xmerl
cd ${inst_dir}/pynab
sudo -u ${owner} git clone --depth 1 -b ${driver_branch} https://github.com/pguyot/nabblockly
cd ${inst_dir}/pynab/nabblockly
# Until we can get OTP 24 from Raspian or Erlang Solutions, get an older rebar binary
sudo -u ${owner} wget https://github.com/erlang/rebar3/releases/download/3.15.1/rebar3 && chmod +x rebar3
sudo apt-get install --no-install-recommends -y g++
sudo -u ${owner} ./rebar3 release

echo "Installing Pynab CLI."
sudo apt-get install --no-install-recommends -y netcat-openbsd
sudo mkdir -p ${inst_dir}/pynab_cli
sudo chown ${owner}:${group} ${inst_dir}/pynab_cli
sudo -u ${owner} git clone --depth 1 -b release https://github.com/f-laurens/pynab_cli ${inst_dir}/pynab_cli
sudo -u ${owner} mkdir -p ${home_dir}/bin
cd ${home_dir}/bin
sudo -u ${owner} ln -fs ${inst_dir}/pynab_cli/bin/* .

echo "Running Pynab install script."
sudo apt-get install --no-install-recommends -y alsa-utils xz-utils avahi-daemon
cd ${inst_dir}/pynab
sudo -u ${owner} /bin/bash install.sh ${install_env}

echo "Cleaning up."
# Cleanup caches.
sudo rm -rf /root/.cache /root/.local /root/.wget-hsts
sudo rm -rf ${home_dir}/.cache ${home_dir}/.local ${home_dir}/.wget-hsts

echo "Pynab setup done."
