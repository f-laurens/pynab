name: ðŸŒ™ Nightly build
on:
  schedule:
    - cron: "0 0 * * *"

jobs:
  check_date:
    name: Check latest commit
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.should_run.outputs.SHOULD_RUN }}

    steps:
      - name: Checkout pynab
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}

      - name: Print latest commit
        run: |
          echo "Last commit: ${{ github.sha }}"

      - name: Check if latest commit is less than a day old
        id: should_run
        run: |
          test -z $(git rev-list --after="24 hours" ${{ github.sha }}) && echo "::set-output name=SHOULD_RUN::false" || echo "::set-output name=SHOULD_RUN::true"

  test_suite:
    name: Run test suite
    runs-on: ubuntu-latest
    needs: check_date
    strategy:
      fail-fast: false
      matrix:
        base_image: ['raspios_lite:2021-05-07', 'dietpi:rpi_armv6_buster']
    if: ${{ needs.check_date.outputs.SHOULD_RUN == 'true' }}

    steps:
      - name: Checkout pynab
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}

      - name: Run test suite in chroot environment
        uses: pguyot/arm-runner-action@v1
        id: arm_runner_tests
        with:
          image_additional_mb: 4096
          base_image: ${{ matrix.base_image }}
          cpu: 'arm1176'
          copy_repository_path: /home/pi/pynab
          commands: |
            sudo useradd pi || true
            sudo sh -c "[ ! -f /etc/sudoers.d/010_pi-nopasswd ] && usermod -aG sudo pi && echo 'pi ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/010_pi-nopasswd || true"
            sudo chown -hR pi:pi /home/pi/pynab
            sudo apt-get update -y
            sudo apt-get install --no-install-recommends -y postgresql libpq-dev git python3 python3-venv python3-dev gettext nginx openssl libssl-dev libffi-dev libmpg123-dev libasound2-dev libatlas-base-dev libgfortran3 libopenblas-dev liblapack-dev zram-tools
            sudo mkdir -p /run/systemd/timesync/ && sudo touch /run/systemd/timesync/synchronized
            sudo apt-get install --no-install-recommends -y alsa-utils xz-utils avahi-daemon
            sudo -u pi taskset -c 0 /bin/bash install.sh ci-chroot-test

  create_image:
    name: Build image
    runs-on: ubuntu-latest
    needs: [check_date, test_suite]
    strategy:
      fail-fast: false
      matrix:
        base_image: ['raspios_lite:2021-05-07', 'dietpi:rpi_armv6_buster']
    if: ${{ needs.check_date.outputs.SHOULD_RUN == 'true' }}

    steps:
      - name: Checkout pynab
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}

      - name: Define the image name
        id: image_and_branch_name
        run: |
          nightly_pattern=nightly
          release_name=${nightly_pattern}-$(date +"%Y-%m-%d")
          if [[ "${{ matrix.base_image }}" =~ "raspios" ]]; then
            os_suffix="-raspios"
          elif [[ "${{ matrix.base_image }}" =~ "dietpi" ]]; then
            os_suffix="-dietpi"
          else
            os_suffix=""
          fi
          echo ::set-output name=RELEASE_NAME::${release_name}
          echo ::set-output name=IMAGE_NAME_SUFFIX::${release_name}${os_suffix}
          echo ::set-output name=LOCAL_BRANCH::${GITHUB_REF/refs\/heads\//}

      - name: Create a release image in chroot environment
        uses: pguyot/arm-runner-action@v1
        id: arm_runner_install
        with:
          image_additional_mb: 4096
          base_image: ${{ matrix.base_image }}
          cpu: 'arm1176'
          commands: |
            echo GITHUB_BRANCH=${{ steps.image_and_branch_name.outputs.LOCAL_BRANCH }}
            echo GITHUB_REPOSITORY=${{ github.repository }}
            sudo GITHUB_BRANCH=${{ steps.image_and_branch_name.outputs.LOCAL_BRANCH }} GITHUB_REPOSITORY=${{ github.repository }} /bin/bash setup ci-chroot
            cd / ; sudo rm -rf /pynab
            sudo apt-get autoremove --purge -y
            sudo apt-get clean
            sudo sh -c 'cat /dev/zero >/boot/zero.fill 2>/dev/null; sync; rm -f /boot/zero.fill'
            sudo sh -c 'cat /dev/zero >/zero.fill 2>/dev/null; sync; rm -f /zero.fill'

      - name: Compress the release image with PiShrink
        run: |
          mv ${{ steps.arm_runner_install.outputs.image }} pynab-${{ steps.image_and_branch_name.outputs.IMAGE_NAME_SUFFIX }}.img
          wget https://raw.githubusercontent.com/Drewsif/PiShrink/fa3c7a27406e7c0a1c7b8688e330f14a766be1ba/pishrink.sh
          sudo bash pishrink.sh -s -Z -a -p pynab-${{ steps.image_and_branch_name.outputs.IMAGE_NAME_SUFFIX }}.img

      - name: Upload the image artifact
        uses: actions/upload-artifact@v2
        with:
          name: release_images
          path: pynab-${{ steps.image_and_branch_name.outputs.IMAGE_NAME_SUFFIX }}.img.xz
          if-no-files-found: error
          retention-days: 1

  create_release:
    name: Release
    runs-on: ubuntu-latest
    needs: create_image

    steps:
      - name: Define the release name
        id: release_name
        run: |
          nightly_pattern=nightly
          release_name=${nightly_pattern}-$(date +"%Y-%m-%d")
          echo ::set-output name=RELEASE_NAME::${release_name}

      - name: Download the image artifact(s)
        uses: actions/download-artifact@v2
        with:
          name: release_images

      - name: Create release with master image
        uses: "marvinpinto/action-automatic-releases@v1.1.2"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ steps.release_name.outputs.RELEASE_NAME }}
          prerelease: true
          draft: false
          title: ${{ steps.release_name.outputs.RELEASE_NAME }}
          files: pynab-${{ steps.release_name.outputs.RELEASE_NAME }}*.img.xz

  clean_nightly_releases:
    name: Remove old nightly releases
    runs-on: ubuntu-latest

    steps:
      - name: Checkout pynab with tags
        uses: actions/checkout@v2
        with:
          # repository hosting the nigthly build
          repository: ${{ github.repository }}
          # all history for tags
          fetch-depth: 0

      - name: Remove old nightly releases
        run: |
          keep=2
          nightly_pattern=nightly
          origin=origin
          old_tags=$(git tag -l | (grep "^${nightly_pattern}" ; true) | sort -r | sed "1,${keep}d" | tr '\n' ' ')
          old_builds=$(hub release --include-drafts | (grep "^${nightly_pattern}" ; true) | sort -r | sed "1,${keep}d" | tr '\n' ' ')
          echo "Old tags to delete:   ${old_tags}"
          echo "Old builds to delete: ${old_builds}"
          echo ${old_builds} | xargs --no-run-if-empty -t -n1 hub release delete
          echo ${old_tags} | xargs --no-run-if-empty -t git push --delete ${origin}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
